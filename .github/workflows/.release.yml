
name: Release & Publish Workflow

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Specify release type: regular, alpha, beta, or rc'
        required: true
        default: 'regular'
        type: choice
        options:
          - regular
          - alpha
          - beta
          - rc
  push:
    tags:
      - 'v*'  # Trigger on version tags

jobs:
  release:
    if: github.event_name == 'workflow_dispatch'  # Only run on manual trigger
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for pushing code
      actions: write
    env:
      RELEASE_TYPE: ${{ github.event.inputs.release-type }}

    steps:
      - name: Validate branch
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "Error: This workflow can only be run on the main branch."
            exit 1
          fi
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important: fetch all history and tags
          # token: ${{ secrets.TOKEN_GITHUB }}
      
      - name: Install Node.js dependencies
        run: npm ci

      - name: Set Git user
        run: |
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"

      # - name: Debug Git status before release
      #   run: |
      #     git status
      #     git branch
      #     git tag
          
      - name: Run release-it
        run: |
          if [ "$RELEASE_TYPE" == "regular" ]; then
            npx release-it --ci
          else
            npx release-it --ci --preRelease="$RELEASE_TYPE"
          fi
        env:
          TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}

  publish:
    needs: release
    permissions:
      id-token: write # Required for authentication using OIDC
      contents: read  # Required for checking out code
    uses: dart-lang/setup-dart/.github/workflows/publish.yml@v1





# # release.yml
# name: Release & Publish

# on:
#   workflow_dispatch:
#     inputs:
#       release-type:
#         description: 'Specify release type: regular, alpha, beta, or rc'
#         required: true
#         default: 'regular'
#         type: choice
#         options:
#           - regular
#           - alpha
#           - beta
#           - rc

# jobs:
#   release:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write  # Required for pushing code
#       actions: write
#     env:
#       RELEASE_TYPE: ${{ github.event.inputs.release-type }}

#     steps:
#       - name: Validate branch
#         run: |
#           if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
#             echo "Error: This workflow can only be run on the main branch."
#             exit 1
#           fi
          
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0  # Important: fetch all history and tags
#           token: ${{ secrets.TOKEN_GITHUB }}  # Use the token here
      
#       - name: Install Node.js dependencies
#         run: npm ci

#       - name: Set Git user
#         run: |
#           git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
#           git config --global user.name "${{ secrets.GIT_USER_NAME }}"

#       - name: Debug Git status before release
#         run: |
#           git status
#           git branch
#           git tag
          
#       - name: Run release-it
#         run: |
#           if [ "$RELEASE_TYPE" == "regular" ]; then
#             npx release-it --ci
#           else
#             npx release-it --ci --preRelease="$RELEASE_TYPE"
#           fi
#         env:
#           TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
          
#       - name: Debug Git status after release
#         run: |
#           git status
#           git branch
#           git tag
          
#       - name: Force push tags
#         run: git push --tags --force













# name: Release & Publish

# on:
#   workflow_dispatch:
#     inputs:
#       release-type:
#         description: 'Specify release type: regular, alpha, beta, or rc'
#         required: true
#         default: 'regular'
#         type: choice
#         options:
#           - regular
#           - alpha
#           - beta
#           - rc

# jobs:
#   release:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write  # Required for pushing code
#       actions: write
#     env:
#       RELEASE_TYPE: ${{ github.event.inputs.release-type }}

#     steps:
#       - name: Validate branch
#         run: |
#           if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
#             echo "Error: This workflow can only be run on the main branch."
#             exit 1
#           fi
#       - name: Checkout code
#         uses: actions/checkout@v4
      
#       - name: Install Node.js dependencies
#         run: npm ci

#       - name: Set Git user
#         run: |
#           git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
#           git config --global user.name "${{ secrets.GIT_USER_NAME }}"

#       - name: Run release-it
#         run: |
#           if [ "$RELEASE_TYPE" == "regular" ]; then
#             npx release-it
#           else
#             npx release-it --preRelease="$RELEASE_TYPE"
#           fi
#         env:
#           TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
        

# name: Release & Publish

# on:
#   workflow_dispatch:
#     inputs:
#       release-type:
#         description: 'Specify release type: regular, alpha, beta, or rc'
#         required: true
#         default: 'regular'
#         type: choice
#         options:
#           - regular
#           - alpha
#           - beta
#           - rc

# jobs:
#   # Job for manual version bump using release-it
#   release:
#     if: github.event_name == 'workflow_dispatch'
#     permissions:
#       contents: write  # Required for creating releases
#     runs-on: ubuntu-latest
#     env:
#       RELEASE_TYPE: ${{ github.event.inputs.release-type }}

#     steps:
#       - name: Validate branch
#         run: |
#           if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
#             echo "Error: This workflow can only be run on the main branch."
#             exit 1
#           fi

#       - name: Checkout source code
#         uses: actions/checkout@v4

#       - name: Install Node.js dependencies
#         run: npm ci
    
#       - name: Set Git user
#         run: |
#           git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
#           git config --global user.name "${{ secrets.GIT_USER_NAME }}"

#       - name: Run release-it
#         run: |
#           if [ "$RELEASE_TYPE" == "regular" ]; then
#             npx release-it
#           else
#             npx release-it --preRelease="$RELEASE_TYPE"
#           fi
#         env:
#           TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
      
#       # - name: Wait for 30 seconds after release
#       #   run: sleep 30  # Waits for 30 seconds after release job completes

#   publish:
#     needs: release
#     # if: startsWith(github.ref, 'refs/tags/')
#     permissions:
#       id-token: write  # Required for authentication using OIDC
#     uses: dart-lang/setup-dart/.github/workflows/publish.yml@v1

  # # This step runs if the condition fails
  #   else:
  #     runs-on: ubuntu-latest
  #     steps:
  #       - name: Print error message
  #         run: echo "Error: This job can only be run for tag refs. Current ref: ${{ github.ref }}"

  

#   # # Job for publishing to pub.dev immediately after release
#   # publish:
#   #   needs: release
#   #   permissions:
#   #     id-token: write  # Required for authentication using OIDC
#   #   uses: dart-lang/setup-dart/.github/workflows/publish.yml@v1
#   # publish:
#   #   needs: release
#   #   permissions:
#   #     id-token: write  # Required for authentication using OIDC
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #     # Checkout latest source code with all history and tags
#   #     - name: Checkout code
#   #       uses: actions/checkout@v4
#   #       with:
#   #         fetch-depth: 0  # Fetch all commits and tags
    
#   #     # Setup Dart SDK with JWT token
#   #     - name: Setup Dart SDK
#   #       uses: dart-lang/setup-dart@v1
  
#   #     # Install dependencies
#   #     - name: Install dependencies
#   #       run: dart pub get
#   #       working-directory: ${{ inputs.working-directory }}
  
#   #     # Publish - dry run (optional but useful for debugging)
#   #     - name: Publish - dry run
#   #       run: dart pub publish --dry-run
#   #       working-directory: ${{ inputs.working-directory }}
  
#   #     # Publish to pub.dev
#   #     - name: Publish to pub.dev
#   #       run: dart pub publish -f
#   #       working-directory: ${{ inputs.working-directory }}
  
